name: Bosta API Security Testing CI/CD
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of security tests to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - critical
        - security
env:
  PYTHON_VERSION: '3.9'
jobs:
  validate:
    name: Validate Project Setup
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Validate configuration files
      run: |
        echo "🔍 Validating project configuration..."
        required_files=(
          "requirements.txt"
          "Makefile"
          "configs/config.yaml"
          "data/test_data.json"
          "tests/test_pickup.py"
          "tests/test_bank_info.py"
          "tests/test_forget_password.py"
        )
        for file in "${required_files[@]}"; do
          if [[ -f "$file" ]]; then
            echo "$file exists"
          else
            echo "$file missing"
            exit 1
          fi
        done
        python -c "import yaml; yaml.safe_load(open('configs/config.yaml'))"
        python -c "import json; json.load(open('data/test_data.json'))"
        echo "Configuration files are valid"
  security-tests:
    name: Security Testing
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        api: [pickup, bank-info, forget-password]
      fail-fast: false
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Create reports directory
      run: mkdir -p reports
    - name: Run security tests - ${{ matrix.api }}
      run: |
        case "${{ matrix.api }}" in
          "pickup")
            echo "Testing Create Pickup API..."
            python -m pytest tests/test_pickup.py -v --tb=short --maxfail=5 \
              --html=reports/pickup-security-report.html \
              --self-contained-html \
              --junitxml=reports/pickup-junit.xml
            ;;
          "bank-info")
            echo "Testing Update Bank Info API..."
            python -m pytest tests/test_bank_info.py -v --tb=short --maxfail=5 \
              --html=reports/bank-info-security-report.html \
              --self-contained-html \
              --junitxml=reports/bank-info-junit.xml
            ;;
          "forget-password")
            echo "Testing Forget Password API..."
            python -m pytest tests/test_forget_password.py -v --tb=short --maxfail=5 \
              --html=reports/forget-password-security-report.html \
              --self-contained-html \
              --junitxml=reports/forget-password-junit.xml
            ;;
        esac
      continue-on-error: true
    - name: Upload test reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-test-reports-${{ matrix.api }}
        path: reports/
        retention-days: 30
  critical-security-check:
    name: Critical Security Issues
    runs-on: ubuntu-latest
    needs: validate
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run critical security tests
      run: |
        echo "⚠️ Running critical security tests..."
        python -m pytest tests/ -m "critical" -v --tb=short --maxfail=3 \
          --html=reports/critical-security-report.html \
          --self-contained-html \
          --junitxml=reports/critical-junit.xml
      continue-on-error: true
    - name: Upload critical test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: critical-security-results
        path: reports/
        retention-days: 30
  security-summary:
    name: Security Test Summary
    runs-on: ubuntu-latest
    needs: [security-tests, critical-security-check]
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Generate security summary
      run: |
        echo "##  Bosta API Security Test Results" > security_summary.md
        echo "" >> security_summary.md
        echo "###  Test Execution Summary" >> security_summary.md
        echo "" >> security_summary.md
        TEST_RESULT=0
        for api in pickup bank_info forget_password; do
          echo "#### API: ${api}" >> security_summary.md
          echo "Testing ${api} API..."
          if python -m pytest tests/test_${api}.py -v --tb=no -q; then
            echo " **${api}**: All tests passed" >> security_summary.md
          else
            echo " **${api}**: Security vulnerabilities detected" >> security_summary.md
            TEST_RESULT=1
          fi
          echo "" >> security_summary.md
        done
        if [ $TEST_RESULT -eq 0 ]; then
          echo "###  Overall Result: SECURE" >> security_summary.md
          echo "All APIs passed security testing." >> security_summary.md
        else
          echo "### Overall Result: VULNERABILITIES FOUND" >> security_summary.md
          echo "Security vulnerabilities detected. Review test reports for details." >> security_summary.md
        fi
        echo "" >> security_summary.md
        echo "### Security Testing Coverage" >> security_summary.md
        echo "" >> security_summary.md
        echo "- **A01 - Broken Access Control**: Authentication bypass, IDOR, privilege escalation" >> security_summary.md
        echo "- **A02 - Cryptographic Failures**: JWT analysis, sensitive data exposure" >> security_summary.md
        echo "- **A03 - Injection**: SQL, NoSQL, XSS, LDAP injection testing" >> security_summary.md
        echo "- **A04 - Insecure Design**: Business logic flaws, OTP bypass" >> security_summary.md
        echo "- **A05 - Security Misconfiguration**: Security headers, error handling" >> security_summary.md
        echo "- **A07 - Authentication Failures**: Token manipulation, session management" >> security_summary.md
        echo "- **A08 - Data Integrity Failures**: Concurrent operations, validation" >> security_summary.md
        echo "- **A10 - Server-Side Request Forgery**: SSRF vulnerability testing" >> security_summary.md
        echo "" >> security_summary.md
        echo "### 📈 Metrics" >> security_summary.md
        echo "- **Total Tests**: ~43 comprehensive security tests" >> security_summary.md
        echo "- **APIs Tested**: 3 (Create Pickup, Update Bank Info, Forget Password)" >> security_summary.md
        echo "- **OWASP Coverage**: Top 10 2021 security risks" >> security_summary.md
        echo "- **Test Environment**: GitHub Actions (Ubuntu Latest, Python ${{ env.PYTHON_VERSION }})" >> security_summary.md
        cat security_summary.md
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security_summary.md
        retention-days: 30
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security_summary.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
